
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI&CD with Gradle

on:
  push:
    branches: ["settings-cd"]
  pull_request:
    branches: ["develop"]


permissions:
  contents: read
    
jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      RESOURCE_PATH: ./src/main/resources/application.yml

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Set application.yml file
      uses: microsoft/variable-substitution@v1
      with:
        files: ${{env.RESOURCE_PATH}}
      env:
        spring.datasource.url: ${{secrets.AWS_RDS_HOST}}
        spring.datasource.username: ${{secrets.AWS_RDS_USERNAME}}
        spring.datasource.password: ${{secrets.AWS_RDS_PASSWORD}}

    # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Build with Gradle 
      run: ./gradlew build -x test

    # docker build & push to production
    - name: Docker Build & Push to Prod
      if: contains(github.ref, 'develop')
      run: |
        docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
        docker build -f Dockerfile -t ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPOSITORY}}:prod .
        docker push ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPOSITORY}}:prod

    # deploy to EC2
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with: 
        host: ${{secrets.AWS_EC2_HOST}}
        username: ec2-user
        key: ${{secrets.AWS_EC2_KEY}}
        script: |
          CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
          if [ ! -z "$CONTAINER_ID" ]; then
            sudo docker stop $CONTAINER_ID
            sudo docker rm $CONTAINER_ID
          fi
          sudo docker pull ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPOSITORY}}:prod
          sudo docker run -d -p 8080:8080 -e TZ=Asia/Seoul ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPOSITORY}}:prod

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle --warning-mode all build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
